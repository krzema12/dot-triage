{"version":3,"sources":["DotTriageComponent.js","App.js","serviceWorker.js","index.js"],"names":["DotTriageComponent","props","totalSize","normalizedRadius","angleInDegrees","color","angleInRadians","Math","PI","endPointY","cos","endPointX","sin","largeArcFlag","width","height","viewBox","transform","cx","cy","r","fill","stroke","strokeWidth","strokelocation","d","_pieWithBorder","size","groupSizeAffected","_groupSizeAffectedToNormalizedRadius","probability","_probabilityToPieAngle","impact","_impactToColor","useStyles","makeStyles","theme","root","padding","spacing","margin","groupSizeAffectedMarks","value","label","probabilityMarks","impactMarks","categoricalValue","marks","find","mark","App","classes","useState","setGroupSizeAffected","setProbability","setImpact","className","Container","maxWidth","Paper","style","textAlign","Typography","gutterBottom","Slider","min","max","defaultValue","aria-labelledby","step","onChange","event","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe547798.chunk.js","sourcesContent":["import React from 'react';\n\nfunction DotTriageComponent(props) {\n  return (\n    <span>\n      {\n        _pieWithBorder(\n          props.size || \"100px\",\n          _groupSizeAffectedToNormalizedRadius(props.groupSizeAffected),\n          _probabilityToPieAngle(props.probability),\n          _impactToColor(props.impact))\n      }\n    </span>\n  );\n}\n\nfunction _groupSizeAffectedToNormalizedRadius(groupSizeAffected) {\n  switch (groupSizeAffected) {\n    case \"small\": return 0.4;\n    case \"medium\": return 0.7;\n    case \"large\": return 1.0;\n    default: return 1.0;\n  }\n}\n\nfunction _probabilityToPieAngle(probability) {\n  switch (probability) {\n    case \"low\": return 90;\n    case \"medium\": return 180;\n    case \"high\": return 270;\n    case \"always\": return 360;\n    default: return 360;\n  }\n}\n\nfunction _impactToColor(impact) {\n  switch (impact) {\n    case \"low\": return \"#4CAF50\";\n    case \"medium\": return \"#FFC107\";\n    case \"high\": return \"#F44336\";\n    default: return \"gray\";\n  }\n}\n\nfunction _pieWithBorder(totalSize, normalizedRadius, angleInDegrees, color) {\n  // https://www.vicompany.nl/magazine/how-to-code-a-pie-a-designers-adventure-in-maths-and-svg\n  const angleInRadians = Math.PI*angleInDegrees/180\n  const endPointY = normalizedRadius*Math.cos(angleInRadians)\n  const endPointX = normalizedRadius*Math.sin(angleInRadians)\n  const largeArcFlag = angleInDegrees > 180 ? 1 : 0\n\n  return (\n    <svg width={totalSize} height={totalSize} viewBox=\"-1 -1 2 2\">\n      <g transform=\"rotate(-90)\">\n        <circle cx=\"0\" cy=\"0\" r=\"0.975\" fill=\"none\" stroke={color} strokeWidth=\"0.05\" strokelocation=\"inside\" />\n        <path d={\"M0,0 L\" + normalizedRadius + \",0 A\" + normalizedRadius + \",\" + normalizedRadius + \" 0 \" + largeArcFlag + \",1 \" + endPointY + \",\" + endPointX + \" Z\"} fill={color}/>\n      </g>\n    </svg>\n  )\n}\n\nexport default DotTriageComponent;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles';\nimport DotTriageComponent from './DotTriageComponent';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(5, 5),\n    margin: theme.spacing(5, 5),\n  },\n}));\n\nconst groupSizeAffectedMarks = [\n  {\n    value: 1,\n    label: 'small',\n  },\n  {\n    value: 2,\n    label: 'medium',\n  },\n  {\n    value: 3,\n    label: 'large',\n  },\n];\n\nconst probabilityMarks = [\n  {\n    value: 1,\n    label: 'low',\n  },\n  {\n    value: 2,\n    label: 'medium',\n  },\n  {\n    value: 3,\n    label: 'high',\n  },\n  {\n    value: 4,\n    label: 'always',\n  },\n];\n\nconst impactMarks = [\n  {\n    value: 1,\n    label: 'low',\n  },\n  {\n    value: 2,\n    label: 'medium',\n  },\n  {\n    value: 3,\n    label: 'high',\n  },\n];\n\nfunction categoricalValue(marks, value) {\n  return marks.find(mark => mark.value === value).label;\n}\n\nfunction App() {\n  const classes = useStyles();\n\n  const [groupSizeAffected, setGroupSizeAffected] = useState(2)\n  const [probability, setProbability] = useState(3)\n  const [impact, setImpact] = useState(2)\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"sm\">\n        <Paper className={classes.root}>\n          <div style={{textAlign: 'center'}}>\n            <DotTriageComponent\n                groupSizeAffected={categoricalValue(groupSizeAffectedMarks, groupSizeAffected)}\n                probability={categoricalValue(probabilityMarks, probability)}\n                impact={categoricalValue(impactMarks, impact)}/>\n          </div>\n          <Typography gutterBottom>\n            Probability\n          </Typography>\n          <Slider\n            min={1}\n            max={4}\n            defaultValue={probability}\n            aria-labelledby=\"discrete-slider-restrict\"\n            step={null}\n            marks={probabilityMarks}\n            onChange={(event, value) => setProbability(value)}/>\n          <Typography gutterBottom>\n            Impact\n          </Typography>\n          <Slider\n            min={1}\n            max={3}\n            defaultValue={impact}\n            aria-labelledby=\"discrete-slider-restrict\"\n            step={null}\n            marks={impactMarks}\n            onChange={(event, value) => setImpact(value)}/>\n            <Typography gutterBottom>\n              Group size affected\n            </Typography>\n            <Slider\n              min={1}\n              max={3}\n              defaultValue={groupSizeAffected}\n              aria-labelledby=\"discrete-slider-restrict\"\n              step={null}\n              marks={groupSizeAffectedMarks}\n              onChange={(event, value) => setGroupSizeAffected(value)}/>\n        </Paper>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}